# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from quite.qrpc import qrpc_pb2 as quite_dot_qrpc_dot_qrpc__pb2

GRPC_GENERATED_VERSION = '1.65.5'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in quite/qrpc/qrpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class QRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunUU = channel.unary_unary(
                '/qrpc.QRPC/RunUU',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.RunUS = channel.unary_stream(
                '/qrpc.QRPC/RunUS',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.RunSU = channel.stream_unary(
                '/qrpc.QRPC/RunSU',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.RunSS = channel.stream_stream(
                '/qrpc.QRPC/RunSS',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.CloneState = channel.unary_unary(
                '/qrpc.QRPC/CloneState',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.RuntimeState = channel.unary_unary(
                '/qrpc.QRPC/RuntimeState',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.Download = channel.unary_unary(
                '/qrpc.QRPC/Download',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.Remove = channel.unary_unary(
                '/qrpc.QRPC/Remove',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.Load = channel.unary_unary(
                '/qrpc.QRPC/Load',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.Unload = channel.unary_unary(
                '/qrpc.QRPC/Unload',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)
        self.Command = channel.unary_unary(
                '/qrpc.QRPC/Command',
                request_serializer=quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
                response_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
                _registered_method=True)


class QRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunUU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunUS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunSU(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunSS(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RuntimeState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunUU': grpc.unary_unary_rpc_method_handler(
                    servicer.RunUU,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'RunUS': grpc.unary_stream_rpc_method_handler(
                    servicer.RunUS,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'RunSU': grpc.stream_unary_rpc_method_handler(
                    servicer.RunSU,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'RunSS': grpc.stream_stream_rpc_method_handler(
                    servicer.RunSS,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'CloneState': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneState,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'RuntimeState': grpc.unary_unary_rpc_method_handler(
                    servicer.RuntimeState,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'Download': grpc.unary_unary_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'Unload': grpc.unary_unary_rpc_method_handler(
                    servicer.Unload,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
            'Command': grpc.unary_unary_rpc_method_handler(
                    servicer.Command,
                    request_deserializer=quite_dot_qrpc_dot_qrpc__pb2.Request.FromString,
                    response_serializer=quite_dot_qrpc_dot_qrpc__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qrpc.QRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qrpc.QRPC', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunUU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/RunUU',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunUS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/qrpc.QRPC/RunUS',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunSU(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/qrpc.QRPC/RunSU',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunSS(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/qrpc.QRPC/RunSS',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/CloneState',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RuntimeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/RuntimeState',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/Download',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/Remove',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/Load',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/Unload',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qrpc.QRPC/Command',
            quite_dot_qrpc_dot_qrpc__pb2.Request.SerializeToString,
            quite_dot_qrpc_dot_qrpc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
